name: DataMiner CICD Automation

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - main
      - master
    tags:
      - "[0-9]+.[0-9]+.[0-9]+.[0-9]+"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  CI:
    uses: SkylineCommunications/_ReusableWorkflows/.github/workflows/Automation Master Workflow.yml@main
    with:
      referenceName: ${{ github.ref_name }}
      runNumber: ${{ github.run_number }}
      referenceType: ${{ github.ref_type }}
      repository: ${{ github.repository }}
      owner: ${{ github.repository_owner }}
      sonarCloudProjectName: skylinecommunications_synergylca
      # The API-key: generated in the DCP Admin app (https://admin.dataminer.services/) as authentication for a certain DataMiner System.
    secrets:
      api-key: ${{secrets.DATAMINER_DEPLOY_KEY}}
      sonarCloudToken: ${{ secrets.SONAR_TOKEN }}
  
  CD:   
    name: CD
    environment: staging
    runs-on: ubuntu-latest
    needs: CI
    steps:
       - uses: actions/checkout@v4

       - name: Find .sln file
         id: findSlnFile 
         run: |
           echo solutionFilePath=$(find . -type f -name '*.sln') >> $GITHUB_OUTPUT
         shell: bash

#       - name: Find or create NuGet.config file
#         if: ${{ github.repository_owner }} == 'SkylineCommunications'
#         id: findOrCreateNuGetFile
#         run: |
#           file=$(find . -type f -iname 'nuget.config' | head -n 1)
#           if [[ -n "$file" ]]; then
#             echo "NuGet config file exists: $file"
#             echo NuGetFileName=$(basename $file) >> $GITHUB_OUTPUT
#           else
#             echo "NuGet config does not exist. Creating..."
#             dotnet new nugetconfig --output ${{ github.workspace }}
#             echo NuGetFileName=nuget.config >> $GITHUB_OUTPUT
#           fi
#         shell: bash

#       - name: Enable Skyline GitHub NuGet Registry
#         if: ${{ github.repository_owner }} == 'SkylineCommunications'
#         run: dotnet nuget add source "https://nuget.pkg.github.com/SkylineCommunications/index.json" --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --configfile ${{ github.workspace }}/${{ steps.findOrCreateNuGetFile.outputs.NuGetFileName }}
      
#       - name: NuGet restore solution
#         run: dotnet restore "${{ steps.findSlnFile.outputs.solutionFilePath }}"

       - name: Install .NET Tools
         run: |
           dotnet tool install -g Skyline.DataMiner.CICD.Tools.Packager
           dotnet tool install -g Skyline.DataMiner.CICD.Tools.CatalogUpload
           dotnet tool install -g Skyline.DataMiner.CICD.Tools.DataMinerDeploy

       - name: Create package name
         id: packageName
         run: |
          if [[ ${{ github.ref_type }} == 'branch' ]]; then
            tempName="${{ github.repository }} ${{ github.ref_name }}_B${{ github.run_number }}"
          else
            tempName="${{ github.repository }} ${{ github.ref_name }}"
          fi
            
          echo name=${tempName//[\"\/\\<>|:*?]/_} >> $GITHUB_OUTPUT
         shell: bash

       - name: Create dmapp package (Development)
         if: github.ref_type == 'branch'
         run: dataminer-package-create dmapp "${{ github.workspace }}" --type automation --build-number ${{ github.run_number }} --output "${{ github.workspace }}" --name "${{ steps.packageName.outputs.name }}"

       - name: Create dmapp package (Release)
         if: github.ref_type == 'tag'
         run: dataminer-package-create dmapp "${{ github.workspace }}" --type automation --version ${{ github.ref_name }} --output "${{ github.workspace }}" --name "${{ steps.packageName.outputs.name }}"

#       - name: Upload to Catalog
#         id: uploadToCatalog
#         run: echo "id=$(dataminer-catalog-upload --path-to-artifact "${{ github.workspace }}/${{ steps.packageName.outputs.name }}.dmapp" --dm-catalog-token ${{ secrets.DATAMINER_DEPLOY_KEY }})" >> $GITHUB_OUTPUT

       - name: Deploy to DataMiner
         run: dataminer-package-deploy from-volatile --artifact-name "${{ steps.packageName.outputs.name }}" --dm-system-token ${{ secrets.DATAMINER_DEPLOY_KEY }}
